#+TITLE:        Логическое программирование
#+AUTHOR:       Кевролетин В.В. группа с8403а(246)
#+EMAIL:        kevroletin@gmial.com
#+LANGUAGE:     russian
#+LATEX_HEADER: \usepackage[cm]{fullpage}

* Задание 19
** Условие

Отношение для упорядоченного дерева. 
   
** Решение

Бинарное дерево является упорядоченным, если для каждого узла верно,
что значение в нём больше любого значения в узглах из левого поддерева
и больше либо равно любому значению из правого поддерева.

Предикат is\_ordered\_tree/1 проверяет, является ли дерево
упорядоченным, успользуя предикат check\_ordering/3. check\_ordering/3 
проверяет, выполняется ли условие упорядоченности для текущего узла
и его правого и левого поддерева.
   
- is\_ordered\_tree(X) :: истина, если X - упорядоченное бинарное дерево
  - X :: узел дерева, допустимые значения - элемент типа node, либо
         null

Вспомогательные предикаты:
         
- is\_data(X) :: истина, если аргумет - число
  - X :: число

- check\_ordering(Data, Left, Right) :: истина, если ужел с данными
     Data, ветками Left и Right удволетворяет условию упорядоченности
  - Data :: число
  - Left :: узел дерева
  - Right :: узел дерева

- check\_less\_eq\_or\_null(Data1, Data2) :: проверка на =< с учетом того,
     что вторым аргументом может быть null
  - Data1 :: число или null
  - Data2 :: число или null

- check\_greater\_or\_null(Data1, Data2) :: проверка на > с учетом того,
     что вторым аргументом может быть null
  - Data1 :: число или null
  - Data2 :: число или null

*** Исходный код

#+begin_src prolog
is_data(X) :-
        number(X).

get_data(node(Data, _, _), Data) :-
        is_data(Data).

is_ordered_tree(node(Data, Left, Right)) :-
        is_data(Data),
        check_ordering(Data, Left, Right),
        is_ordered_tree(Left),
        is_ordered_tree(Right).

is_ordered_tree(null).

check_ordering(Data, Left, Right) :-
        check_less_eq_or_null(Data, Right),
        check_greater_or_null(Data, Left).

check_less_eq_or_null(Data, null) :-
        is_data(Data).

check_less_eq_or_null(Data, node(DataNode, _, _)) :-
        is_data(Data),
        =<(Data, DataNode).

check_greater_or_null(Data, null) :-
        is_data(Data).
check_greater_or_null(Data, node(DataNode, _, _)) :-
        is_data(Data),
        >(Data, DataNode).        
    
#+end_src

*** Тесты

Для написания тестов использовалось расширение языка Prolog в
реализации SWI-Prolog.
    
**** is\_ordered\_tree(+)
#+begin_src prolog
:- begin_tests(is_ordered_tree).

test(test01) :-
        is_ordered_tree(node(10, null, null)), !.
test(test02) :-
        is_ordered_tree(null), !.
test(test03) :-
        is_ordered_tree(null), !.
test(test04) :-
        is_ordered_tree(node(10,
                             node(5, null, null),
                             node(15, null, null))), !.
test(test04) :-
        is_ordered_tree(node(10,
                             node(5,
                                  node(0, null, null),
                                  null),
                             node(15,
                                  null,
                                  node(20, null, null)))), !.
test(test04 [false]) :-
        is_ordered_tree(node(10,
                             node(5,
                                  node(0, null, null),
                                  node(0, null, null)),
                             node(15,
                                  null,
                                  node(20, null, null)))), !.
:- end_tests(is_ordered_tree).
#+end_src
