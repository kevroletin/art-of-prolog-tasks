#+TITLE:        Логическое программирование
#+AUTHOR:       Кевролетин В.В. группа с8403а(246)
#+EMAIL:        kevroletin@gmial.com
#+LANGUAGE:     russian
#+LATEX_HEADER: \usepackage[cm]{fullpage}

* Задание 22
** Условие

Написать программу для отношения substitute для термов с использованием univ. 
   
** Решение

Воодится вспомогательный терм substitute_each для итерации по списку,
полученному при помощи предиката univ:

*** Исходный код

#+begin_src prolog

substitute(Old, New, Old, New).

substitute(Old, _, Term, Term) :-
        atomic(Term),
        \+ compare(=, Old, Term).

substitute(Old, New, Term, Term1) :-
        compound(Term),
        Term =.. [F | Args],
        substitute_each(Old, New, Args, NewArgs),
        Term1 =.. [F | NewArgs].

substitute_each(Old, New, [Old | Xs], [New | Ys]) :-
        substitute_each(Old, New, Xs, Ys).

substitute_each(Old, New, [ X | Xs], [X | Ys]) :-
        substitute_each(Old, New, Xs, Ys).

substitute_each(_, _, [], []).
        
#+end_src

*** Тесты

Для тестирования используется расширения языка SWI-Prolog

#+begin_src prolog
:- begin_tests(substitute).

test(t01) :-
        substitute(a, b, a, b).
test(t02) :-
        substitute(a, b, c, c).
test(t03) :-
        substitute(a, b, node(a), node(b)).
test(t04) :-
        substitute(a, b, node(a, a), node(b, b)).
test(t05) :-
        substitute(node(a, b), node(c, d),
            node(node(a, b),
                 node(c, d)),
            node(node(c, d),
                 node(c, d))).

:- end_tests(substitute).
#+end_src
