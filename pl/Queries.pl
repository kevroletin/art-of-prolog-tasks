/* SWI-Prolog query log.  This file contains all syntactically
   correct queries issued in this directory.  It is used by the
   test wizard to generate unit tests.
*/

position(a,node(b,node(a,a)),X).
position(a,a,X).
position(a,node(b,c),X).
position(a,node(a,node(a,a)),X).
position(a,node(b,node(a,a)),X).
consult('/home/behemoth/Work/prolog/pl/20.pl').
run_tests.
ocurences(node(a,b),node(node(a,b),node(a,node(a,b))),2).
ocurences(node(a,b),node(node(a,b),node(a,node(a,b))),2).
consult('/home/behemoth/Work/prolog/pl/20.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/20.pl').
position(a,node(b,node(a,a)),X).
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
position(a,node(b,node(a,a)),X).
run_tests.
consult('/home/behemoth/Work/prolog/pl/20.pl').
run_tests.
position(null,null,'.'(1,[])).
position(null,null,'.'(1,[])).
consult('/home/behemoth/Work/prolog/pl/20.pl').
position(null,null,'.'(1,[])).
position(null,null,[]).
subterm(node(null,null),node(1,node(null,null)),'.'(1,'.'(1,[]))).
subterm(a,node(a),X).
position(a,node(a),X).
position(a,node(a),'.'(1,[])).
position(a,node(b,node(a,a)),X).
consult('/home/behemoth/Work/prolog/pl/20.pl').
run_tests.
position(a,node(b,c),X).
position(a,node(a,node(a,a)),X).
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
consult('/home/behemoth/Work/prolog/pl/20.pl').
run_tests.
position(null,null,[]).
position(null,null,[]).
position(a,node(a),'.'(1,[])).
position(a,node(b,node(a,a)),X).
position(a,node(b,c),X).
read(X).
read(X).
read(X).
read(X).
read('.'(X,'.'(Y,[]))).
consult('/home/behemoth/Work/prolog/pl/22.pl').
sub(a,b,a,X).
sub(a,b,c,X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
sub(a,b,c,X).
sub(a,b,node(a,b,c),X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
sub(a,b,node(a),node(b)).
sub(a,b,node(a),X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
sub(a,b,node(a),X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
sub(a,b,node(a),X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
sub(a,b,a,X).
sub(a,b,c,X).
sub(a,b,node(a),X).
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/22.pl').
consult('/home/behemoth/Work/prolog/pl/22.pl').
run_tests.
consult('/home/behemoth/Work/prolog/pl/21.pl').
plus(X,Y,10).
module(10).
consult('/home/behemoth/Work/prolog/pl/21.pl').
consult('/home/behemoth/Work/prolog/pl/21.pl').
step_to_zero(3,X).
step_to_zero(3,X).
step_to_zero(-3,X).
make_sum(10,0,0,X,Y).
consult('/home/behemoth/Work/prolog/pl/21.pl').
make_sum(10,0,0,X,Y).
plus(10,X,Y).
plus(2,X,Y).
-3.
is(X,-(10,20)).
consult('/home/behemoth/Work/prolog/pl/21.pl').
consult('/home/behemoth/Work/prolog/pl/21.pl').
plus(X,Y,2).
