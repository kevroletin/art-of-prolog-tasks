#+TITLE:        Логическое программирование
#+AUTHOR:       Кевролетин В.В. группа с8403а(246)
#+EMAIL:        kevroletin@gmial.com
#+LANGUAGE:     russian
#+LATEX_HEADER: \usepackage[cm]{fullpage}

* Задание 15
** Условие

Отношение between/3, который генерирует числа в обратном порядке,
скалярное произведение элементов двух списков. 
   
** between

- between(I, J, K) :: истина, если X - число в диапазоне [I, J]
  + I :: число
  + J :: число
  + K :: число
   
*** Исходный код

Т.к. порядок правил в программе влияет на то, в каком порядке Пролог
будет их применять во время вывода, достаточно поменять 2 правила
местами:

#+begin_src prolog
between(I, J, K) :-
        I < J,
        (I1 is I + 1),
        between(I1, J, K).

between(I, _, I).
#+end_src

*** Тесты

**** between(+, +, +)
#+begin_src prolog

between(10, 10, 10).

true.

between(10, 20, 30).

false.


between(10, 30, 20).
true 

#+end_src

**** between(+, +, -)

#+begin_src prolog

between(10, 10, X).

X = 10.
     
between(10, 15, X).

X = 15

X = 14

X = 13

X = 12

X = 11

X = 10

#+end_src

** scalar\_mult

*** Исходный код

- scalar\_mult(List1, List2, Res) :: истана, если Res - сказалярное
     произведение векторов List1 и List2
  + List1 :: список, элементы которого - числа
  + List2 :: список, элементы которого - числа    
  + Res :: число

#+begin_src prolog
scalar_mult(List1, List2, Res) :-
        scalar_mult(List1, List2, Res, 0).

scalar_mult([], [], Res, Res).

scalar_mult([X | Xs], [Y | Ys], Result, CurrRes) :-
        (NewCurrRes is X * Y + CurrRes),
        scalar_mult(Xs, Ys, Result, NewCurrRes).
#+end_src

*** Тесты

**** scalar\_mult(+, +, +)
#+begin_src prolog

?- scalar_mult([1, 1, 1], [2, 2, 2], 6).

true.

?- scalar_mult([1, 1, 1], [4, 4, 4], 12).

true.

#+end_src

**** scalar\_mult(+, +, -)
#+begin_src prolog

scalar_mult([1, 2, 3], [4, 5, 6], X).

X = 32.

?- scalar_mult([1, 1, 1], [4, 4, 4], X).

X = 12.

?- scalar_mult([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5 , 6, 7], X).

X = 140.

#+end_src
